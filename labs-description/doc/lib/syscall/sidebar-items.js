window.SIDEBAR_ITEMS = {"fn":[["copy_mapping","Системный вызов [`syscall::copy_mapping()`]. Создаёт копию отображения виртуальной памяти из вызывающего процесса в процесс, заданный `dst_pid`. Исходный диапазон задаёт `src_block`, целевой — `dst_block`. В целевом процессе диапазон будет отображён с флагами `flags`. Не допускает целевое отображение с более широким набором флагов, чем исходное. После выполнения у процессов появляется область разделяемой памяти."],["exit","Системный вызов [`syscall::exit()`]. Освобождает слот таблицы процессов и возвращается в контекст ядра, из которого пользовательский процесс был запущен."],["exofork","Системный вызов [`syscall::exofork()`]. Создаёт копию вызывающего процесса и возвращает исходному процессу [`Pid`] копии. Внутри копии возвращает [`Pid::Current`]. При этом новый процесс создаётся практически без адресного пространства и не готовый к работе. Поэтому он, в частности, не ставится в очередь планировщика. Текущий контекст исходного процесса записывает в копию, чтобы в копии вернуться туда же, куда происходит возврат из системного вызова для вызывающего процесса."],["log_value","Системный вызов [`syscall::log_value()`]. Логирует строку `message` и число `value`."],["map","Системный вызов [`syscall::map()`]. Отображает в памяти процесса, заданного `dst_pid`, блок страниц `dst_block` с флагами доступа `flags`. Если `dst_block.start_address()` равен нулю, сам выбирает свободный участок адресного пространства размера `dst_block.size()`."],["sched_yield","Системный вызов [`syscall::sched_yield()`]. Перепланирует процесс в конец очереди готовых к исполнению процессов и забирает у него CPU."],["set_state","Системный вызов [`syscall::set_state()`]. Переводит целевой процесс, заданный идентификатором `dst_pid`, в заданное состояние `state`. Ставит его в очередь планировщика в случае [`State::RUNNABLE`]."],["set_trap_handler","Системный вызов [`syscall::set_trap_handler()`]. Устанавливает для целевого процесса, заданного идентификатором `dst_pid`, пользовательский обработчик прерывания `trap_handler()` со стеком `trap_stack`."],["syscall","Системный вызовов номер `number` с аргументами `arg0`–`arg4`."],["trap_handler_invoker","Передаёт управление обработчику `trap_handler()` установленному с помощью [`syscall::set_trap_handler()`]."],["trap_trampoline","Получает управление, если в коде пользователя возникло исключение. Сохраняет контекст исключения и передаёт управление обработчику `trap_handler()` установленному с помощью [`syscall::set_trap_handler()`] через вспомогательную функцию [`trap_handler_invoker()`]. После выполнения установленного обработчика `trap_handler()` восстанавливает сохранённый контекст."],["unmap","Системный вызов [`syscall::unmap()`]. Удаляет из виртуальной памяти целевого процесса `dst_pid` блок страниц `dst_block`."]],"static":[["TRAP_HANDLER","Адрес обработчика `trap_handler()`, установленный с помощью [`syscall::set_trap_handler()`]."]]};